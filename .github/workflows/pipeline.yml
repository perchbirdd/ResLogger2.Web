name: pipeline
on:
  push:
    branches:
      - "main"
      - "staging"

permissions:
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Detect changes in source files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            src/**
            deps/**
            src/Dockerfile
    outputs:
      should_build: ${{ steps.changed-files.outputs.any_changed }}
  
  compile:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x.x'
      - name: Restore
        run: dotnet restore
      - name: Compile
        run: dotnet build --no-restore --configuration Release

  identify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set deployment environment
        id: identify_env
        run: |
          if [[ "${{ github.ref_name }}" == "main" && "${{ github.ref_type }}" == "branch" ]]; then
            echo "environment=Production" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "staging" && "${{ github.ref_type }}" == "branch" ]]; then
            echo "environment=Staging" >> $GITHUB_OUTPUT
            echo "image_tag=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=None" >> $GITHUB_OUTPUT
            echo "image_tag=None" >> $GITHUB_OUTPUT
          fi
    outputs:
      environment: ${{ steps.identify_env.outputs.environment }}
      image_tag: ${{ steps.identify_env.outputs.image_tag }}
  
  build-push:
    runs-on: ${{ matrix.runner }}
    needs: [compile, identify, detect-changes]
    if: needs.detect-changes.outputs.should_build == 'true'
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          file: ./src/Dockerfile
          context: .
          provenance: false
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/perchbirdd/reslogger2:${{ needs.identify.outputs.image_tag }}-${{ matrix.arch }}
            ghcr.io/perchbirdd/reslogger2:${{ github.sha }}-${{ matrix.arch }}

  create-manifests:
    runs-on: ubuntu-latest
    needs: [identify, build-push, detect-changes]
    if: needs.detect-changes.outputs.should_build == 'true'
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create SHA manifest and push
        run: |
          docker manifest create \
            ghcr.io/perchbirdd/reslogger2:${{ github.sha }} \
            --amend ghcr.io/perchbirdd/reslogger2:${{ github.sha }}-amd64 \
            --amend ghcr.io/perchbirdd/reslogger2:${{ github.sha }}-arm64
          docker manifest push ghcr.io/perchbirdd/reslogger2:${{ github.sha }}
      - name: Create ${{ needs.identify.outputs.image_tag }} manifest and push
        run: |
          docker manifest create \
            ghcr.io/perchbirdd/reslogger2:${{ needs.identify.outputs.image_tag }} \
            --amend ghcr.io/perchbirdd/reslogger2:${{ needs.identify.outputs.image_tag }}-amd64 \
            --amend ghcr.io/perchbirdd/reslogger2:${{ needs.identify.outputs.image_tag }}-arm64
          docker manifest push ghcr.io/perchbirdd/reslogger2:${{ needs.identify.outputs.image_tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: [identify]
    if: always() && needs.identify.result == 'success'
    environment: ${{ needs.identify.outputs.environment }}
    concurrency: deploy-${{ needs.identify.outputs.environment }}
    steps:
      - name: Set Deployment Environment
        id: deployment_env
        run: |
          if [[ "${{ needs.identify.outputs.environment }}" == "None" ]]; then
            exit 1
          else
            echo "environment=${{ needs.identify.outputs.environment }}" >> $GITHUB_ENV
          fi
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          args: --ssh
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          cat <<EOF >> ~/.ssh/config
          Host ${{ vars.ENV_HOSTNAME }}
              User ${{ vars.ENV_USER }}
              Hostname ${{ vars.ENV_HOSTNAME }}
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config
      - name: Hydrate env file
        run: |
          source $environment.env
          echo "POSTGRES_PASSWORD=${{ secrets.DB_PASS }}" >> $environment.env
          echo "RL2_CONNSTRING=Host=db:5432;Database=rl2;Username=${POSTGRES_USER};Password=${{ secrets.DB_PASS }}" >> $environment.env
          echo "DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${{ secrets.DB_PASS }}@db:5432/rl2?sslmode=disable" >> $environment.env
          echo "FORWARDER_OUTPUT_APIKEY=${{ secrets.SEQ_API_KEY }}" >> $environment.env
      - name: Deploy with Docker Stack
        run: |
          docker context create remote --docker "host=ssh://${{ vars.ENV_USER }}@${{ vars.ENV_HOSTNAME }}"
          docker context use remote
          docker stack deploy -c docker-stack.$environment.yml rl2-$environment